pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  VAPID.subject: $(vapidSubject)
  VAPID.publicKey: $(vapidPublicKey)
  VAPID.privateKey: $(vapidPrivateKey)
  ConnectionStrings.NotifyMeDB: $(notifyMeDBConn)
  Quartz.SQLiteDataSourceTemplatePath: $(quartzDbTemplatePath)

steps:
- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    projects: '**/notifyme.server.csproj'
    command: 'restore'
    includeNuGetOrg: true

- task: FileTransform@1
  displayName: 'File transformation: appsettings.json'
  inputs:
    folderPath: '$(System.DefaultWorkingDirectory)'
    targetFiles: '**/appsettings.json'
    fileType: json

- task: DotNetCoreCLI@2
  inputs:
    projects: '**/notifyme.server.csproj'
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/notifyme.server.tests.csproj'
    testRunTitle: 'Run Tests'
  displayName: test

- task: DotNetCoreCLI@2
  displayName: 'Publishing App...'
  inputs:
    command: publish
    publishWebProjects: true
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: false

- task: PublishBuildArtifacts@1
  displayName: 'Publishing Build Artifacts...'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: Docker@2
  displayName: "Logging into DockerHub..."
  inputs:
    containerRegistry: 'Personal DockerHub'
    command: 'login'

- task: DockerCompose@0
  displayName: 'Building sevices via Docker-Compose...'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryEndpoint: 'Personal DockerHub'
    dockerComposeFile: '**/docker-compose.yml'
    action: 'Build services'
    additionalImageTags: '$(Build.BuildId)'
    includeLatestTag: true

- task: DockerCompose@0
  displayName: 'Pushing sevices via Docker-Compose...'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryEndpoint: 'Personal DockerHub'
    dockerComposeFile: '**/docker-compose.yml'
    action: 'Push services'
    qualifyImageNames: true
    additionalImageTags: '$(Build.BuildId)'
    includeLatestTag: true
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
