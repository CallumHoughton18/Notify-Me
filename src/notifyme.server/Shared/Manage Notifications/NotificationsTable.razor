@using notifyme.shared.Helpers
@using notifyme.shared.Models.DataStore_Models
@using Microsoft.AspNetCore.Components

<MudTable Items="@Notifications" MultiSelection="false" Hover="@_hover" SelectedItem="SelectedNotification"
          SelectedItemChanged="SelectedNotificationChanged" Class="@Class"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
          CanCancelEdit="true">
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Message</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.NotificationTitle</MudTd>
        <MudTd DataLabel="Message">@context.NotificationBody</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Title">
            <MudTextField @bind-Value="@context.NotificationTitle" Required/>
        </MudTd>
        <MudTd DataLabel="Message">
            <MudTextField @bind-Value="@context.NotificationBody" Required/>
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="DeleteSelectedNotification"></MudIconButton>
        </MudTd>
    </RowEditingTemplate>
</MudTable>

@code {
    private bool _hover = true;
    private Notification backupPrevNotif = null;

    [Parameter]
    public IEnumerable<Notification> Notifications { get; set; }

    [Parameter]
    public Notification SelectedNotification { get; set; }

    [Parameter]
    public EventCallback<Notification> SelectedNotificationChanged { get; set; }

    [Parameter]
    public EventCallback<Notification> SaveSelectedNotification { get; set; }

    [Parameter]
    public EventCallback DeleteSelectedNotification { get; set; }

    [Parameter]
    public string Class { get; set; }

    private void BackupItem(object notification)
    {
        if (notification is not Notification prevNotification) return;

        backupPrevNotif = new Notification()
        {
            NotificationTitle = prevNotification.NotificationTitle,
            NotificationBody = prevNotification.NotificationBody
        };
    }

    private void ResetItemToOriginalValues(object notification)
    {
        if (notification is not Notification prevNotification) return;

        prevNotification.NotificationTitle = backupPrevNotif.NotificationTitle;
        prevNotification.NotificationBody = backupPrevNotif.NotificationBody;
    }

    private void ItemHasBeenCommitted(object notification)
    {
        if (notification is not Notification) return;
        SaveSelectedNotification.InvokeAsync().ConfigureAwait(false);
    }

    private Task OnSelectedNotificationChanged(Notification e)
    {
        SelectedNotification = e;
        return SelectedNotificationChanged.InvokeAsync(e);
    }
}