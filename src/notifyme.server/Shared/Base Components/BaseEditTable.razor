@using notifyme.shared.Models.DataStore_Models

@typeparam TModelType 

<MudTable Items="@DataCollection" MultiSelection="false" Hover="@_hover" SelectedItem="SelectedData"
          SelectedItemChanged="SelectedDataChanged" Class="@Class"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
          CanCancelEdit="true">
    @ChildContent
</MudTable>

@code {
    private bool _hover = true;
    private TModelType _backupPrevSelection = default;
    
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public IEnumerable<TModelType> DataCollection { get; set; }

    [Parameter]
    public TModelType SelectedData { get; set; }

    [Parameter]
    public EventCallback<TModelType> SelectedDataChanged { get; set; }

    [Parameter]
    public EventCallback<TModelType> SaveSelectedData { get; set; }

    [Parameter]
    public EventCallback DeleteSelectedData { get; set; }
    
    [Parameter]
    public Func<TModelType, TModelType> CloneAction { get; set; }
    
    [Parameter]
    public Action<TModelType, TModelType> RestoreAction { get; set; }
    
    [Parameter]
    public string Class { get; set; }

    private void BackupItem(object selectedData)
    {
        if (SelectedData is not  TModelType prevData) return;

        _backupPrevSelection = CloneAction(prevData);
    }

    private void ResetItemToOriginalValues(object notification)
    {
        if (notification is not TModelType prevNotification) return;
        RestoreAction(prevNotification, _backupPrevSelection);
    }

    private void ItemHasBeenCommitted(object notification)
    {
        if (notification is not Notification) return;
        SaveSelectedData.InvokeAsync().ConfigureAwait(false);
    }

    private Task OnSelectedNotificationChanged(TModelType e)
    {
        SelectedData = e;
        return SelectedDataChanged.InvokeAsync(e);
    }
}