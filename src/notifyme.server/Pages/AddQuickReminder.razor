@page "/"
@using notifyme.shared.ViewModels
@using notifyme.server.Components
@using notifyme.server.Shared.Manage_Notifications
@using notifyme.server.Shared.Manage_Subscriptions
@using notifyme.shared.ViewModels.Create_Notification
@inject CreateQuickNotificationViewModel  _createNotifVm;
@inject RegisterNotificationSubscriptionViewModel _subToNotifVm;
@inherits BaseMvvmComponent
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<div style="width: 100%">
    <MudPaper Class="pa-8 mt-5">
        <AddNotificationForm NewNotification="@_createNotifVm.QuickNotification" OnSubmit="@HandleSubmit"></AddNotificationForm>
    </MudPaper>
</div>

<AddSubscription ViewModel="@_subToNotifVm"></AddSubscription>

@code {
    protected override Task OnInitializedAsync()
    {
        BindViewModelToLifeCycle(_createNotifVm);
        return base.OnInitializedAsync();
    }

    private async Task HandleSubmit()
    {
        var savedNotification = await _createNotifVm.SaveNotification();
        if (savedNotification)
        {
            _snackbar.Add("Notification Saved", Severity.Success, (config) => { config.CloseAfterNavigation = true; });
        }
    }
}
